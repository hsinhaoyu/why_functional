#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+EXPORT_FILE_NAME: ../html/newton.html
#+TITLE: Calculating square roots with lazy evaluation 

* The math bit
To approximate sqrt(n), we start with an initial value =x=, and apply (x + n/x) / 2.0 repeatedly.

=next_sqrt_approx(n)= returns a closure that brings its input closer to sqrt(n).
#+begin_src python :noweb yes :tangle ../src/newton.py
  <<NEWTON_IMPORTS>>

  def next_sqrt_approx(n: float) -> Callable[[float], float]:
      """Next step in the approximation of sqrt(n) from x"""
      def next_approx_(x: float) -> float:
          return (x + n / x) / 2.0
      return next_approx_  
#+end_src

A example call: approximating sqrt(10.0) from 2.0, in just one iteration:
#+begin_src python :noweb yes :tangle ../src/test_newton.py
  <<TEST_NEWTON_IMPORTS>>

  def test_next_sqrt_approx():
      f = next_sqrt_approx(10.0)
      assert f(2.0) == pytest.approx(3.5)
#+end_src

* Define a nesting iterator
=repeat_f(f, a)= applies the function =f= repeatedly to =a=. (The original code is more elegant and more general, but Python is not a lazy functional language).
#+begin_src python :noweb yes :tangle ../src/lazy_utils.py
  <<LAZY_UTILS_IMPORTS>>

  def repeat_f(f: Callable[[float], float], a: float) -> Iterator[float]:
      """Infinite iterator: [a, f(a), f(f(a)), f(f(f(a))) ...]"""
      acc: float = a

      while True:
          yield acc
          acc = f(acc)
#+end_src

A simple test: an iterator that yields 0, 1, 2, 3...
#+begin_src python :noweb yes :tangle ../src/test_lazy_utils.py
  <<TEST_LAZY_UTILS_IMPORTS>>

  def test_repeat_f():
      r = repeat_f(lambda n: n + 1, 0)
      v1, v2, v3 = next(r), next(r), next(r)
      assert v1 == 0
      assert v2 == 1
      assert v3 == 2
#+end_src

* Define a lazy iterator that approximates =sqrt(n)=
At this stage, we can create an iterator that takes us closer and closer to sqrt(n) with each iteration. All we have to do is to chain =next_sqrt_approx= and =repeat_f= together:

#+begin_src python :noweb yes :tangle ../src/newton.py
  def newton_sqrt_(n: float, a: float) -> Iterator[float]:
      """An infinite iterator approximating sqrt(n) starting from a"""
      return repeat_f(next_sqrt_approx(n), a)
#+end_src

Again, approximating sqrt(10.0) from 2.0:
#+begin_src python :noweb yes :tangle ../src/test_newton.py
  def test_newton_sqrt_():
      r = newton_sqrt_(10.0, 2.0)
      v1, v2, v3 = next(r), next(r), next(r)
      assert v1 == pytest.approx(2.0)
      assert v2 == pytest.approx(3.5)
      assert v3 == pytest.approx(3.178571428571429)
#+end_src

* Add a stopping condition
We add a =within= function to stop the iteration when the difference between two successive iterations is smaller than =esp=.

#+begin_src python :noweb yes :tangle ../src/lazy_utils.py
  def within(esp: float, itr: Iterator[float]) -> Iterator[float]:
      """Stop if the next two iterations have a small delta."""
      while True:
          a = next(itr)
          b = next(itr)
          if abs(a - b) < esp:
              yield b              
#+end_src

Now we can solve our numerical problem:
#+begin_src python :noweb yes :tangle ../src/newton.py
  def newton_sqrt(n: float, a: float) -> float:
      """Approximate sqrt(n) starting from a, using the Newton-Raphson method."""
      r = within(0.00001, repeat_f(next_sqrt_approx(n), a))
      return next(r)
#+end_src

A simple test:
#+begin_src python :noweb yes :tangle ../src/test_newton.py
  def test_newton_sqrt():
      res = newton_sqrt(10.0, 2.0)
      assert res == pytest.approx(math.sqrt(10.0))
#+end_src

* Appendix: Imports
#+begin_src python :tangle no :noweb-ref NEWTON_IMPORTS
  from typing import Callable, Iterator
  from lazy_utils import *
#+end_src

#+begin_src python :tangle no :noweb-ref TEST_NEWTON_IMPORTS
  import math
  import pytest
  from newton import *
#+end_src

#+begin_src python :tangle no :noweb-ref LAZY_UTILS_IMPORTS
  from typing import Callable, Iterator, Tuple, NamedTuple, Any, Optional, List
  from itertools import tee
#+end_src

#+begin_src python :tangle no :noweb-ref TEST_LAZY_UTILS_IMPORTS
  from lazy_utils import *
#+end_src
