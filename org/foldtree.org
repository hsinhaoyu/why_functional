#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+EXPORT_FILE_NAME: ../html/foldtree.html
#+OPTIONS: broken-links:t
#+TITLE: Higher-order functions for trees
Hughes' paper begins with higher-order constructions such as folding (=functools.reduce= in Python) and mapping (=map= in Python). Replacing loops with these functions makes them more modular and more flexible. Since it's easy to find Python tutorials on this topic, I will skip this part.

Higher-order functions are typically used to implement operations on lists. Hughes took this idea further, and showed that they can also be used to work on more complex structures such as trees. We'll return to this topic in a later [[lazy_tree.org][chapter]].

* Representing trees
I'll represent a tree as a named tuple. With this representation, a node in a tree has a label and a list of subtrees. A node can have many subtrees, so the tree is not restricted to be binary.
#+begin_src python :noweb no-export :tangle ../src/foldtree.py
  <<FOLDTREE_IMPORTS>>
  
  Node = NamedTuple('Node', [('label', Any), ('subtrees', List)])
#+end_src

Here's an example tree:
#+begin_src python :noweb no-export :tangle ../src/test_foldtree.py
  <<TEST_FOLDTREE_IMPORTS>>

  my_tree = Node(1, [
                     Node(2, []),
                     Node(3, [
                              Node(4, [])
                             ]
                     )
                    ])
#+end_src

* Extending =reduce= for trees
=reduce= uses a reduction function of two arguments to fold a list. For example, using =operator.add= as the reduction function, =reduce(operator.add, [1, 2, 3, 4], 0)= sums the numbers in [1, 2, 3, 4].

To generalize =reduce= to trees, we need two reduction functions: =f= and =g=. Both are functions of two arguments. Given a node, =g= reduces the subtrees to a value which can be further combined with the label using =f=. Since =g= is basically =reduce=, an initializing constant =a= is also needed.
#+begin_src python :noweb no-export :tangle ../src/foldtree.py
  def foldtree(f: Callable, g: Callable, a: Any, t: Union[Node, List]) -> Any:
      """Apply two functions (f and g) of two arguments to transform a tree.
      f: fold a node's label to the folded subtrees
      g: fold a list of subtrees
      a: an initial constant
      t: a tree, a list of subtrees, or []
      """
      if t == []:
          return a
      elif isinstance(t, Node):
          (label, subtrees) = t
          return f(label, foldtree(f, g, a, subtrees))  
      else:
          # fold multiple subtrees
          subtree = t[0]
          rest = t[1:]
          return g(
                   foldtree(f, g, a, subtree),
                   foldtree(f, g, a, rest))
#+end_src

#+RESULTS:

Some notes about type hints: the types of =foldtree= should be:
- =f= : =Callable[[Any, T1], T2]=.
- =g= : =Callable[[T2, T1], T1]=
- =a= : =T1=

I don't specify them in the code, because in the next section, different uses of =foldtree= will require different types. However, remember that =f= has complete freedom in types. Its two inputs and one output can all have different types. On the other hand, =g= doesn't have any freedom in the types of its inputs and output.

* Summing all labels in a tree
Just like using =reduce= to sum the numbers in a list, we can use =foldtree= to sum the labels in a tree:
#+begin_src python :noweb yes :tangle ../src/foldtree.py
  def sumtree(t: Node) -> int:
      """Sum all labels in a tree."""
      f = operator.add
      g = operator.add
      return foldtree(f, g, 0, t)
#+end_src

#+begin_src python :noweb yes :tangle ../src/test_foldtree.py
  def test_sumtree():
      assert sumtree(Node(1,[])) == 1
      assert sumtree(my_tree) == 10
      assert sumtree(my_tree2) == sum(range(1, 12))
#+end_src

* Flattening trees
=tree_labels= collects all labels of a tree into a list.
#+begin_src python :noweb yes :tangle ../src/foldtree.py
  def tree_labels(t: Node):
      """Collect all labels of a tree into a list."""
      def f(label: Any, folded_subtrees: List) -> List:
          return [label] + folded_subtrees

      def g(folded_first: List, folded_rest: List) -> List:
          return folded_first + folded_rest
      
      return foldtree(f, g, [], t)
#+end_src

#+begin_src python :noweb yes :tangle ../src/test_foldtree.py
  def test_tree_labels():
      assert tree_labels(Node(1, [])) == [1]
      assert tree_labels(my_tree) == [1, 2, 3, 4]
      assert tree_labels(my_tree2) == list(range(1, 12))
#+end_src

* Mapping functions to trees
Map a function =f= to all labels in a tree, creating another tree:
#+begin_src python :noweb yes :tangle ../src/foldtree.py
  def maptree(func: Callable, t: Node) -> Node:
      """Map a function to all labels in a tree.
      Return a new tree.
      """
      def f(label: Any, folded_subtrees: List) -> Node:
          return Node(func(label), folded_subtrees)

      def g(folded_first: Node, folded_rest: List) -> List:
          return [folded_first] + folded_rest

      return foldtree(f, g, [], t)
#+end_src

#+begin_src python :noweb yes :tangle ../src/test_foldtree.py
  def test_maptree():
      res = maptree(lambda x: -1 * x, Node(1, []))
      assert res == Node(-1, [])

      res = maptree(lambda x: -1 * x, my_tree)
      res = tree_labels(res)
      assert res == [-1, -2, -3, -4]

      res = maptree(lambda x: -1 * x, my_tree2)
      res = tree_labels(res)
      assert res == [-1 * i for i in range(1, 12)]
#+end_src

* Size of trees
How many node are there in the tree?
#+begin_src python :noweb yes :tangle ../src/foldtree.py
  def tree_size(t: Node) -> int:
      """Return the number of nodes in a tree"""
      def f(label: int, folded_subtrees: int) -> int:
          return 1 + folded_subtrees

      def g(folded_first: int, folded_rest: int) -> int:
          return folded_first + folded_rest

      return foldtree(f, g, 0, t)
#+end_src

#+begin_src python :noweb yes :tangle ../src/test_foldtree.py
  def test_tree_size():
      assert tree_size(my_tree) == 4
      assert tree_size(Node(1, [])) == 1
      assert tree_size(my_tree2) == 11
#+end_src

* Depth of trees
What is the longest branch in the tree?
#+begin_src python :noweb yes :tangle ../src/foldtree.py
  def tree_depth(t: Node) -> int:
      """Returns the maximal depth of nodes in the tree"""
      def f(label: Any, folded_subtrees: int) -> int:
          return 1 + folded_subtrees

      def g(folded_first: int, folded_rest: int) -> int:
          return max(folded_first, folded_rest)

      return foldtree(f, g, 0, t)
#+end_src

#+begin_src python :noweb yes :tangle ../src/test_foldtree.py
  def test_tree_depth():
      t = Node(1, [])
      assert tree_depth(t) == 1

      t = Node(1, [Node(2, [])])
      assert tree_depth(t) == 2

      assert tree_depth(my_tree) == 3

      assert tree_depth(my_tree2) == 5
#+end_src

* Appendix: imports
#+begin_src python :tangle no :noweb-ref FOLDTREE_IMPORTS
  from typing import Tuple, Callable, Any, List, Union, NamedTuple
  import operator
#+end_src

#+begin_src python :tangle no :noweb-ref TEST_FOLDTREE_IMPORTS
  from foldtree import *

  my_tree2 = Node(1, [
                      Node(2, [
                               Node(3, []),
                               Node(4, [
                                        Node(5, []),
                                        Node(6, [Node(7, [])])
                                       ]),
                               Node(8, [Node(9, [])])
                              ]),
                      Node(10, [Node(11, [])])])
#+end_src
